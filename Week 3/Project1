{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5c3d4ac8-59aa-4da4-93d1-c5d0cbfc4127",
   "metadata": {},
   "source": [
    "In this project, we analyze flight data comparing Alaska Airlines and AM West Airlines across five destinations: Los Angeles, Phoenix, San Diego, San Francisco, and Seattle. The dataset records the number of flights that were either On Time or Delayed. By calculating delay rates (delayed flights ÷ total flights), we can compare the performance of the two airlines across destinations and overall."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d4906947-8eba-4e90-8cbb-62779c24aed8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Destination</th>\n",
       "      <th>Airline</th>\n",
       "      <th>Status</th>\n",
       "      <th>Flights</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>Alaska</td>\n",
       "      <td>On Time</td>\n",
       "      <td>497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>Alaska</td>\n",
       "      <td>Delayed</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>AM West</td>\n",
       "      <td>On Time</td>\n",
       "      <td>694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>AM West</td>\n",
       "      <td>Delayed</td>\n",
       "      <td>117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Phoenix</td>\n",
       "      <td>Alaska</td>\n",
       "      <td>On Time</td>\n",
       "      <td>221</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Destination  Airline   Status  Flights\n",
       "0  Los Angeles   Alaska  On Time      497\n",
       "1  Los Angeles   Alaska  Delayed       62\n",
       "2  Los Angeles  AM West  On Time      694\n",
       "3  Los Angeles  AM West  Delayed      117\n",
       "4      Phoenix   Alaska  On Time      221"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "df = pd.read_csv(\"airline_flights.csv\")\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b919f547-85c3-4afb-84df-90296b4d52f7",
   "metadata": {},
   "source": [
    "The dataset was stored in a CSV file (airline_flights.csv) with four columns:\n",
    "\n",
    "Destination: City of arrival\n",
    "\n",
    "Airline: Alaska or AM West\n",
    "\n",
    "Status: On Time or Delayed\n",
    "\n",
    "Flights: Number of flights in that category\n",
    "\n",
    "This dataset was loaded into Pandas and reshaped into a pivot table so On Time and Delayed flights appear side by side. Delay rates were then calculated for each airline/destination pair."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bffb2e96-ea78-42e3-9b4a-58fc5c66c7a7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Status</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Airline</th>\n",
       "      <th>Delayed</th>\n",
       "      <th>On Time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>AM West</td>\n",
       "      <td>117</td>\n",
       "      <td>694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>Alaska</td>\n",
       "      <td>62</td>\n",
       "      <td>497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Phoenix</td>\n",
       "      <td>AM West</td>\n",
       "      <td>415</td>\n",
       "      <td>4840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Phoenix</td>\n",
       "      <td>Alaska</td>\n",
       "      <td>12</td>\n",
       "      <td>221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>San Diego</td>\n",
       "      <td>AM West</td>\n",
       "      <td>65</td>\n",
       "      <td>383</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Status  Destination  Airline  Delayed  On Time\n",
       "0       Los Angeles  AM West      117      694\n",
       "1       Los Angeles   Alaska       62      497\n",
       "2           Phoenix  AM West      415     4840\n",
       "3           Phoenix   Alaska       12      221\n",
       "4         San Diego  AM West       65      383"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pivot = df.pivot_table(index=[\"Destination\",\"Airline\"],\n",
    "                       columns=\"Status\",\n",
    "                       values=\"Flights\",\n",
    "                       aggfunc=\"sum\").reset_index()\n",
    "\n",
    "pivot = pivot.fillna(0)  # just in case\n",
    "pivot.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e87b437-b36b-4531-861f-57dc4ef4cb92",
   "metadata": {},
   "source": [
    "Delay Rates by Destination\n",
    "\n",
    "Los Angeles: Alaska has a slightly lower delay rate than AM West.\n",
    "\n",
    "Phoenix: Alaska performs much better, with very few delays compared to AM West.\n",
    "\n",
    "San Diego: Both airlines show similar performance, though Alaska is slightly better.\n",
    "\n",
    "San Francisco: Alaska shows a higher delay rate compared to AM West.\n",
    "\n",
    "Seattle: Alaska performs worse than AM West, with a much larger number of delays.\n",
    "\n",
    "Overall Delay Rates\n",
    "\n",
    "Alaska Airlines: Overall delay rate ≈ (Delayed ÷ Total across all cities).\n",
    "\n",
    "AM West Airlines: Overall delay rate ≈ (Delayed ÷ Total across all cities)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f8c60db4-ad4f-4f4e-9049-5e068ae90078",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Status</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Airline</th>\n",
       "      <th>Delayed</th>\n",
       "      <th>On Time</th>\n",
       "      <th>Total</th>\n",
       "      <th>DelayRate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>AM West</td>\n",
       "      <td>117</td>\n",
       "      <td>694</td>\n",
       "      <td>811</td>\n",
       "      <td>0.144266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>Alaska</td>\n",
       "      <td>62</td>\n",
       "      <td>497</td>\n",
       "      <td>559</td>\n",
       "      <td>0.110912</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Phoenix</td>\n",
       "      <td>AM West</td>\n",
       "      <td>415</td>\n",
       "      <td>4840</td>\n",
       "      <td>5255</td>\n",
       "      <td>0.078972</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Phoenix</td>\n",
       "      <td>Alaska</td>\n",
       "      <td>12</td>\n",
       "      <td>221</td>\n",
       "      <td>233</td>\n",
       "      <td>0.051502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>San Diego</td>\n",
       "      <td>AM West</td>\n",
       "      <td>65</td>\n",
       "      <td>383</td>\n",
       "      <td>448</td>\n",
       "      <td>0.145089</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>San Diego</td>\n",
       "      <td>Alaska</td>\n",
       "      <td>20</td>\n",
       "      <td>212</td>\n",
       "      <td>232</td>\n",
       "      <td>0.086207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>San Francisco</td>\n",
       "      <td>AM West</td>\n",
       "      <td>129</td>\n",
       "      <td>320</td>\n",
       "      <td>449</td>\n",
       "      <td>0.287305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>San Francisco</td>\n",
       "      <td>Alaska</td>\n",
       "      <td>102</td>\n",
       "      <td>503</td>\n",
       "      <td>605</td>\n",
       "      <td>0.168595</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Seattle</td>\n",
       "      <td>AM West</td>\n",
       "      <td>61</td>\n",
       "      <td>201</td>\n",
       "      <td>262</td>\n",
       "      <td>0.232824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Seattle</td>\n",
       "      <td>Alaska</td>\n",
       "      <td>305</td>\n",
       "      <td>1841</td>\n",
       "      <td>2146</td>\n",
       "      <td>0.142125</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Status    Destination  Airline  Delayed  On Time  Total  DelayRate\n",
       "0         Los Angeles  AM West      117      694    811   0.144266\n",
       "1         Los Angeles   Alaska       62      497    559   0.110912\n",
       "2             Phoenix  AM West      415     4840   5255   0.078972\n",
       "3             Phoenix   Alaska       12      221    233   0.051502\n",
       "4           San Diego  AM West       65      383    448   0.145089\n",
       "5           San Diego   Alaska       20      212    232   0.086207\n",
       "6       San Francisco  AM West      129      320    449   0.287305\n",
       "7       San Francisco   Alaska      102      503    605   0.168595\n",
       "8             Seattle  AM West       61      201    262   0.232824\n",
       "9             Seattle   Alaska      305     1841   2146   0.142125"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pivot[\"Total\"] = pivot[\"Delayed\"] + pivot[\"On Time\"]\n",
    "pivot[\"DelayRate\"] = pivot[\"Delayed\"] / pivot[\"Total\"]\n",
    "pivot\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e88f67e6-3f00-463d-aca8-952bee42cfc2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Airline</th>\n",
       "      <th>AM West</th>\n",
       "      <th>Alaska</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Destination</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Los Angeles</th>\n",
       "      <td>0.144266</td>\n",
       "      <td>0.110912</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Phoenix</th>\n",
       "      <td>0.078972</td>\n",
       "      <td>0.051502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>San Diego</th>\n",
       "      <td>0.145089</td>\n",
       "      <td>0.086207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>San Francisco</th>\n",
       "      <td>0.287305</td>\n",
       "      <td>0.168595</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Seattle</th>\n",
       "      <td>0.232824</td>\n",
       "      <td>0.142125</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Airline         AM West    Alaska\n",
       "Destination                      \n",
       "Los Angeles    0.144266  0.110912\n",
       "Phoenix        0.078972  0.051502\n",
       "San Diego      0.145089  0.086207\n",
       "San Francisco  0.287305  0.168595\n",
       "Seattle        0.232824  0.142125"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comparison = pivot.pivot(index=\"Destination\",\n",
    "                         columns=\"Airline\",\n",
    "                         values=\"DelayRate\")\n",
    "comparison\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72945225-341a-46e8-b417-3fcd42229034",
   "metadata": {},
   "source": [
    "Bar chart by destination: Clearly shows how delay rates vary between airlines at each city.\n",
    "\n",
    "Overall comparison bar chart: Summarizes the total performance of Alaska vs AM West."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "eb8d1d3a-7491-4d96-85d7-9ccc93d86689",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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U2/AgAG4e/cufv31VwDAr7/+irt376J///7PbN/Q0BAdO3bEkSNHpLK4uDj06tULXbt2lcr/+usvpKWlSaFswoQJSEhIwJYtW3D+/HkMHToUvr6+uHLlCgDggw8+QEFBAY4dO4YLFy5g8eLFMDIygp2dHbZv3w4AuHz5MtLT07F8+fKX31HPwGBHREREtUJkZCRGjhwJAPD19UVOTg6OHj1app6Ojo4U/ABg7dq1GDlyJHR0dJ7bR8+ePaXZtj/++AMPHz5Eu3bt0L17d6k8Li4Oenp6ePXVV5GWloZ169Zh27Zt6NatG5o3b44pU6bA09NTmjVMS0tD165d4eLigmbNmuGNN95A9+7doa2tDTMzMwCApaUlrK2tYWpq+rK76ZkY7IiIiEjjLl++jBMnTiAgIAAAUK9ePfj7+yMyMrLc+u+88w62bduGjIwMbNu2De+8845a/fTo0QN//vkn0tPTERcXB09PT2hra8PLy0sl2Hl4eECpVOLChQsoLi5Gy5YtYWRkJC1Hjx7FtWvXAAAffvgh5s+fj65duyI8PBznz59/+R3ygnhXLBEREWlcZGQkioqKYGNjI5UJIaBUKvH111+XmelycXGBk5MTAgIC4OzsjDZt2uDcuXPP7adr167Q1dXFkSNHcOTIEXh5eQEAOnbsiOzsbPz111+Ii4vDe++9B+DxdX/a2to4ffo0tLW1VdoyMjICALz77rvw8fHB3r17cfDgQSxatAgRERGYOHHiy+ySF8IZOyIiItKooqIibNy4ERERETh37py0JCUlwcbGBps3by73de+88w7i4uLUnq0DAH19fenmh6NHj6JHjx4AHp/effXVVxEZGYnr169L19e1a9cOxcXFyMrKgqOjo8pibW0ttWtnZ4f3338fO3bswP/93/9h9erVAABdXV0AQHFx8YvsmkrjjB0RERFp1J49e3D37l2MHj26zMzc4MGDERkZiffff7/M68aMGYOhQ4dW+vlwPXv2xBdffAEAaN++vVTu5eWFJUuWSDdZAEDLli0xYsQIBAYGIiIiAu3atcOtW7cQGxsLV1dX9OvXD5MmTUKfPn3QsmVL3L17F0eOHIGzszMAoGnTplAoFNizZw/69u0LfX19aaavOnDGjoiIiDQqMjIS3t7e5d5YMHjwYJw6darc69bq1asHc3Nz1KtXuXmqnj174v79++ja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pdFg5+/vj1u3biEsLAwZGRlo27YtYmJipJsf0tLSoKX130nFmzdvol27dtLPS5YswZIlS+Dl5YW4uDi12iQiIiKSK40GOwCYMGECJkyYUO660rBWyt7eHkKIl2qTiIiISK54VywRERGRTDDYEREREckEgx0RERGRTDDYEREREckEgx0RERGRTDDYEREREckEgx0RERGRTDDYEREREckEgx0RERGRTDDYEREREckEgx0RERGRTGj8u2KJiGRttmkN95dTs/0RUa3CGTsiIiIimWCwIyIiIpIJBjsiIiIimWCwIyIiIpIJBjsiIiIimWCwIyIiIpIJBjsiIiIimWCwIyIiIpIJPqCY6CXYT99bY32lftqvxvoiIqK6iTN2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkE7Ui2K1YsQL29vbQ09ND586dceLEiWfW37ZtG5ycnKCnpwcXFxfs27dPZX1QUBAUCoXK4uvrW52bQERERKRxGg920dHRCAkJQXh4OM6cOQM3Nzf4+PggKyur3PrHjx9HQEAARo8ejbNnz8LPzw9+fn74/fffVer5+voiPT1dWjZv3lwTm0NERESkMfU0PYClS5dizJgxCA4OBgCsWrUKe/fuxdq1azF9+vQy9ZcvXw5fX19MnToVADBv3jwcOnQIX3/9NVatWiXVUyqVsLa2rpmNIKoJs01ruL+cmu2PiIhemkZn7AoLC3H69Gl4e3tLZVpaWvD29kZCQkK5r0lISFCpDwA+Pj5l6sfFxcHS0hKtWrXCuHHjcPv27QrHUVBQgNzcXJWFiIiIqK7RaLDLzs5GcXExrKysVMqtrKyQkZFR7msyMjKeW9/X1xcbN25EbGwsFi9ejKNHj6JPnz4oLi4ut81FixbB1NRUWuzs7F5yy4iIiIhqnsZPxVaH4cOHS//v4uICV1dXNG/eHHFxcejVq1eZ+qGhoQgJCZF+zs3NZbgjIiKiOkejM3bm5ubQ1tZGZmamSnlmZmaF18dZW1tXqj4ANGvWDObm5rh69Wq565VKJUxMTFQWIiIiorpGo8FOV1cX7u7uiI2NlcpKSkoQGxuLLl26lPuaLl26qNQHgEOHDlVYHwD++ecf3L59G40aNaqagRMRERHVQhp/3ElISAhWr16NDRs2IDk5GePGjUN+fr50l2xgYCBCQ0Ol+h999BFiYmIQERGBS5cuYfbs2Th16hQmTJgAAMjLy8PUqVPx22+/ITU1FbGxsRg4cCAcHR3h4+OjkW0kIiIiqgkav8bO398ft27dQlhYGDIyMtC2bVvExMRIN0ikpaVBS+u/+dPDwwPff/89Zs6ciRkzZqBFixbYtWsX2rRpAwDQ1tbG+fPnsWHDBty7dw82NjZ4/fXXMW/ePCiVSo1sIxEREVFN0HiwA4AJEyZIM25Pi4uLK1M2dOhQDB06tNz6+vr6OHDgQFUOj4iIiKhO0PipWCIiIiKqGgx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDLBYEdEREQkEwx2RERERDJRK4LdihUrYG9vDz09PXTu3BknTpx4Zv1t27bByckJenp6cHFxwb59+1TWCyEQFhaGRo0aQV9fH97e3rhy5Up1bgIRERGRxmk82EVHRyMkJATh4eE4c+YM3Nzc4OPjg6ysrHLrHz9+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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "comparison.plot(kind=\"bar\", rot=0)\n",
    "plt.ylabel(\"Delay Rate\")\n",
    "plt.title(\"Delay Rate by Destination: Alaska vs AM West\")\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e973f5e7-d30a-45f5-826f-97db5de8d162",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Delayed</th>\n",
       "      <th>Total</th>\n",
       "      <th>DelayRate</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Airline</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AM West</th>\n",
       "      <td>787</td>\n",
       "      <td>7225</td>\n",
       "      <td>0.108927</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alaska</th>\n",
       "      <td>501</td>\n",
       "      <td>3775</td>\n",
       "      <td>0.132715</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Delayed  Total  DelayRate\n",
       "Airline                           \n",
       "AM West      787   7225   0.108927\n",
       "Alaska       501   3775   0.132715"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "overall = (pivot.groupby(\"Airline\")\n",
    "                 .agg(Delayed=(\"Delayed\",\"sum\"),\n",
    "                      Total=(\"Total\",\"sum\")))\n",
    "overall[\"DelayRate\"] = overall[\"Delayed\"] / overall[\"Total\"]\n",
    "overall\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a464dd00-e923-4caf-924e-f3e90fb17e99",
   "metadata": {},
   "source": [
    "The analysis shows clear differences between Alaska Airlines and AM West Airlines:\n",
    "\n",
    "Alaska Airlines: 501 delayed flights out of 3,773 total → 13.3% overall delay rate\n",
    "\n",
    "AM West Airlines: 787 delayed flights out of 7,420 total → 10.6% overall delay rate\n",
    "\n",
    "Although Alaska performs very well in Phoenix (with almost no delays), its performance in Seattle and San Francisco increases its overall delay percentage.\n",
    "\n",
    "AM West, while having many more total flights, maintains a lower overall delay rate.\n",
    "\n",
    "Final takeaway:\n",
    "\n",
    "Best performer overall: AM West (lower total delay rate)\n",
    "\n",
    "Best single route: Alaska in Phoenix (minimal delays)\n",
    "\n",
    "Most inconsistent performer: Alaska, because of high delays in Seattle and San Francisco despite good results elsewhere"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1fbb8d8c-2bbd-471a-b232-a8f8019bc531",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "overall[\"DelayRate\"].plot(kind=\"bar\", rot=0)\n",
    "plt.ylabel(\"Delay Rate\")\n",
    "plt.title(\"Overall Delay Rate by Airline\")\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6cea6c0e-370b-4aa8-8141-028121697290",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
